services:
  postgres:
    image: postgres:16
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-agent_service}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5

  agent_service:
    build:
      context: .
      dockerfile: docker/Dockerfile.service
    ports:
      - "8080:8080"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/info"]
      interval: 5s
      timeout: 5s
      retries: 5
    develop:
      watch:
        - path: src/agents/
          action: sync+restart
          target: /app/agents/
        - path: src/schema/
          action: sync+restart
          target: /app/schema/
        - path: src/service/
          action: sync+restart
          target: /app/service/
        - path: src/core/
          action: sync+restart
          target: /app/core/
        - path: src/memory/
          action: sync+restart
          target: /app/memory/

  streamlit_app:
    build:
      context: .
      dockerfile: docker/Dockerfile.app
    ports:
      - "8501:8501"
    depends_on:
      - agent_service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/healthz"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      - AGENT_URL=http://agent_service:8080
    develop:
      watch:
        - path: src/client/
          action: sync+restart
          target: /app/client/
        - path: src/schema/
          action: sync+restart
          target: /app/schema/
        - path: src/streamlit_app.py
          action: sync+restart
          target: /app/streamlit_app.py
  next:
    build:
      context: .
      dockerfile: docker/Dockerfile.next
    restart: always
    volumes:
      - ./agent-web-kit:/app
      - /app/node_modules
      - /app/.next
    env_file:
      - .env
    ports:
      - 3000:3000

  weaviate:
    command:
      - --host
      - 0.0.0.0
      - --port
      - '8088'
      - --scheme
      - http
    image: semitechnologies/weaviate:1.17.2
    ports:
      - 8088:8088
    restart: on-failure:0
    env_file:
      - .env
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'text2vec-openai'
      ENABLE_MODULES: 'text2vec-openai,qna-openai'
      CLUSTER_HOSTNAME: 'openai-weaviate-cluster'
      OPENAI_APIKEY: ${OPENAI_API_KEY}
      # Optionally set your OpenAI API key here, or provide it at runtime

volumes:
  postgres_data:
